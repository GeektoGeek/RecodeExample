install.packages("h2o")
library(h2o)
install.packages("data.table")
q()
install.packages("logistf")
library(logistf)
data(sex2)
View(sex2)
summary(sex2)
df<- sex2
summary(df$case)
library(data.table)
install.packages("data.table")
library(data.table)
library(data.table)
data.table(summary$case)
data.table(summary(df$case))
df1<- data.table(summary(df$case))
prop.table(table(df$case))
install.packages("caret")
library(caret)
set.seed(3033)
index <- createDataPartition(y = df$case, p= 0.7, list = FALSE)
training <- train[index,]
testing <- train[-index,]
library(caret)
set.seed(3033)
index <- createDataPartition(y = df$case, p= 0.7, list = FALSE)
training <- df[index,]
testing <- df[-index,]
fit.glm<- glm(case~age+oc+vic+vicl+vis+dia,data=training,family=binomial())
install.packages("pscl")
library(pscl)
pR2(fit.glm)
library(pscl)
pR2(fit.glm)
pR2(fit.glm)
install.packages("pscl")
library(pscl)
library(pscl)
pR2(fit.glm)
pred<- predict(fit.glm,newdata=testing, type='response')
pred<- predict(fit.glm,newdata=testing, type='class')
testing<- cbind(testing,pred)
View(testing)
testing$pred <- ifelse(pred > 0.5, 1,0)
summary(fit.glm)
Accuracy<- 1- (mean(testing$case!= testing$pred))
Accuracy
fit_penalizedLogistic<-logistf(case ~ age+oc+vic+vicl+vis+dia, data=training)
install.packages("logistf")
library(logistf)
fit_penalizedLogistic<-logistf(case ~ age+oc+vic+vicl+vis+dia, data=training)
summary(fit_penalizedLogistic)
pR2(fit_penalizedLogistic)
pred_logispenal<- predict(fit_penalizedLogistic,newdata=testing, type='response')
pred_logispenal<- predict(fit, newdata = testing[1:5, ], type = 'response')
pred_logispenal<- predict(fit_penalizedLogistic, newdata = testing[1:5, ], type = 'response')
install.packages("brglm")
library(brglm)
library(brglm)
pred_logispenal<- predict(fit_penalizedLogistic, newdata = testing[1:5, ], type = 'response')
fit_penalizedLogistic<-brglm(case ~ age+oc+vic+vicl+vis+dia, data=training)
Pred1<- predict(fit_penalizedLogistic, newdata = testing[1:5, ], type = "response")
testing<- cbind(testing,pred1)
testing<- cbind(testing,Pred1)
Pred1<- predict(fit_penalizedLogistic, newdata = testing[1:71, ], type = "response")
testing<- cbind(testing,Pred1)
testing$Pred1 <- ifelse(Pred1 > 0.5, 1,0)
Accuracy1<- 1- (mean(testing$case!= testing$Pred1))
#### How to boot strap a specific mean or median from multiple samples..
meanf<- function(x,i){mean(x[i])}
bootmean<- boot(data=mtcars$mpg, meanf, R=1000)
install.packages("boot")
library(boot)
bootmean<- boot(data=mtcars$mpg, meanf, R=1000)
bootmean
meanf<- function(x,i){mean(x[i])}
bootmean<- boot(data=mtcars$mpg, meanf, R=1000)
bootmean
medianf<- function(x,i){median(x[i])}
bootmedian<- boot(data=mtcars$mpg, medianf,R=1000)
bootmedian
bootCI <- boot.ci(median.boot, conf = .90, type="bca")
bootCI <- boot.ci(bootmedian, conf = .90, type="bca")
bootCI
### Calulate mean
x<- norm(1000)
x<- rnorm(10000)
boot.mean<- function(x,i){x[i]}
voot<- boot(data=mtcars, boot.mean, 10000)
voot<- boot(data=mtcars$mpg, boot.mean, R=10000)
library(boot)
x<- rnorm(10000)
boot.mean<- function(x,i){x[i]}
voot<- boot(data=mtcars$mpg, boot.mean, R=10000)
boot.median<- function(x,i){median=x[i]}
voot1<- boot(data=mtcars$mpg, boot.median, R=10000)
SE.boot <- sd(as.vector(boot.median$t))
SE.boot <- sd(as.vector(boot.median$t))
SE.boot     <- sd(as.vector(boot.median$t))
SE.boot     <- sd(voot1)
SE.boot     <- sd(as.vector(boot.median))
boot.mean
voot
voot1
custom.boot <- function(times, data=df) {
boots <- rep(NA, times)
for (i in 1:times) {
boots[i] <- sd(sample(data, length(data), replace=TRUE))/sqrt(length(data))
}
boots
}
custom.boot()
custom.boot
boot.median<- function(x,i){median=x[i]}
voot1<- boot(mtcars$mpg, boot.median, R=1000)
voot1
set.seed(1000)
x<- rnorm(10000)
meanfunc<- function(x,i){mean(x[i])}
bootmean<- boot(data=mtcars$mpg, meanfunc, R=1000)
bootmean
library(boot)
f.med       <- function(Y,i){median(Y[i])}
median.boot <- boot(data=mtcars$mpg, f.med, R = 10000)
## Calculating the Standard Error
SE.boot     <- sd(as.vector(median.boot$t))
SE.boot
### Confidence Interval
median.int.90 <- mean(median.boot$t) + qt( c(0.05, 0.95), length(x) - 1) * SE.boot
median.int.90
SE.boot     <- sd(as.vector(voot1$t))
SE.boot
median.int.90 <- mean(voot1$t) + qt( c(0.05, 0.95), length(x) - 1) * SE.boot
median.int.90
setwd("~/CodeForAllProjects/R/KnowData_Project/R&DWithPre-Burn-IN/PoC_PreburnIN/With_Pass_Fail_Label")
Data<- read.csv("Sample3.csv", sep=",")
Data1<- read.csv("Sample4.csv", sep=",")
library(data.table)
Data_Copy<- Data
Data1_Copy<- Data1
### Change the format Data
t_Data <- transpose(Data)
colnames(t_Data) <- rownames(Data)
rownames(t_Data) <- colnames(Data)
### Change the format Data1
t_Data1 <- transpose(Data1)
colnames(t_Data1) <- rownames(Data1)
rownames(t_Data1) <- colnames(Data1)
FinalData<- rbind(t_Data,t_Data1)
View(FinalData)
View(FinalData)
View(FinalData)
View(FinalData)
write.csv(FinalData[,1:101], "FinalData.csv", row.names = FALSE)
FData<- read.csv("FinalData1.csv", sep=",")
View(FData)
prop.table(table(FData$Pass1_Fail0))
FData<- read.csv("FinalData1.csv", sep=",")
View(FData)
prop.table(table(FData$Pass1_Fail0))
library(dplyr)
FData1<- dplyr::filter(FData, grepl('Pass1_Fail0', Pass1_Fail0))
View(FData1)
FData1<- dplyr::filter(FData, grepl('0.29', Pass1_Fail0))
View(FData1)
FData1<- dplyr::filter(FData, !grepl('0.29', Pass1_Fail0))
prop.table(table(FData1$Pass1_Fail0))
prop.table(table(FData$Pass1_Fail0))
View(FData1)
write.csv(FData1[,1:101], "FData1.csv", row.names = FALSE)
prop.table(table(FData$Pass1_Fail0))
prop.table(table(FData1$Pass1_Fail0))
savehistory("~/CodeForAllProjects/R/KnowData_Project/R&DWithPre-Burn-IN/PoC_PreburnIN/With_Pass_Fail_Label/RCode-5-13.Rhistory")
